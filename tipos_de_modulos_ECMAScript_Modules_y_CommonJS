En JavaScript, los dos tipos principales de m√≥dulos son ECMAScript Modules (ESM) y CommonJS (CJS).
Veamos sus diferencias, ventajas y c√≥mo se usan.

1. M√ìDULOS ES6 (ECMASCRIPT MODULES - ESM)
Los ECMAScript Modules (ESM) son el est√°ndar moderno de JavaScript para trabajar con m√≥dulos. Se utilizan en navegadores y en entornos modernos como Node.js (a partir de la versi√≥n 12+).

Caracter√≠sticas de ESM
‚úÖ Usa las palabras clave import y export.
‚úÖ Se ejecuta de manera as√≠ncrona y soporta import() din√°mico.
‚úÖ Permite tree-shaking (eliminaci√≥n de c√≥digo no utilizado).
‚úÖ Soportado en navegadores y en Node.js con "type": "module".


Ejemplo de uso

- EXPORTACI√ìN NOMBRADA:

// archivo math.js
export function suma(a, b) {
	return a + b;
}

export const PI = 3.1416;


- IMPORTACI√ìN NOMBRADA:

// archivo main.js
import { suma, PI } from './math.js';

console.log(suma(2, 3)); // 5
console.log(PI); // 3.1416

- EXPORTACI√ìN POR DEFECTO:

// archivo saludo.js
export default function saludo(nombre) {
	return `Hola, ${nombre}`;

- IMPORTACI√ìN POR DEFECTO

// archivo main.js
import saludo from './saludo.js';

console.log(saludo('Juan')); // Hola, Juan


- IMPORTACI√ìN DIN√ÅMICA CON IMPORT()
ESM permite la importaci√≥n din√°mica de m√≥dulos con import(), lo que mejora el rendimiento al cargar solo lo necesario
en el momento adecuado.

sync function cargarModulo() {
	const { suma } = await import('./math.js');
	console.log(suma(5, 3)); // 8
}

cargarModulo();


USO EN NODE.JS
Para usar m√≥dulos ESM en Node.js, se debe hacer una de estas dos cosas:

1- Cambiar la extensi√≥n del archivo a .mjs.
2- Agregar "type": "module" en el package.json.

{
	"type": "module"
}

---------------------------------------------------------------------

2. COMMONJS (CJS)

CommonJS (CJS) es el sistema de m√≥dulos usado tradicionalmente en Node.js. Usa require() para importar y
module.exports para exportar.

Caracter√≠sticas de CJS
‚úÖ Usa require() y module.exports.
‚úÖ Se ejecuta de manera s√≠ncrona.
‚úÖ Compatible con versiones antiguas de Node.js.
üö´ No es compatible directamente con el navegador sin herramientas como Webpack.
üö´ No permite import() din√°mico nativamente.

Ejemplo de uso

- EXPORTACI√ìN

// archivo math.js
module.exports = {
	suma: (a, b) => a + b,
	PI: 3.1416,
};

- IMPORTACI√ìN

// archivo main.js
const { suma, PI } = require('./math');

console.log(suma(2, 3)); // 5
console.log(PI); // 3.1416

- EXPORTACI√ìN DE UNA SOLA FUNCI√ìN

// archivo saludo.js
module.exports = function saludo(nombre) {
	return `Hola, ${nombre}`;
};

- IMPORTACI√ìN DE UNA SOLA FUNCI√ìN

// archivo main.js
const saludo = require('./saludo');

console.log(saludo('Juan')); // Hola, Juan


DIFERENCIAS ENTRE ESM Y CJS


CARACTER√çSTICA                 ECMASCRIPT MODULES (ESM)                    COMMONJS (CJS)
Sintaxis de importaci√≥n        import { x } from 'modulo.js'               const x = require('moduloo')
Sintaxis de exportaci√≥n        export / export default                     module.exports
Ejecuci√≥n                      As√≠ncrona (soporta import())                S√≠ncrona
Compatibilidad                 Navegadores y Node.js (moderno)             Solo Node.js
Tree-shaking                   ‚úÖ S√≠                                       üö´ No
Soporte en Node.js             "type": "module" o .mjs                     Soportado por defecto


¬øCu√°l usar?
- Para proyectos modernos en el navegador: ESM es la mejor opci√≥n.
- Para proyectos en Node.js modernos: Se recomienda ESM, pero CJS sigue siendo com√∫n.
- Para compatibilidad con proyectos antiguos de Node.js: CJS sigue siendo √∫til.

En general, ESM es el est√°ndar actual y el recomendado para nuevas aplicaciones.

